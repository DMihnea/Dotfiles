** Set default terminal to ansi-term with bash
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
(interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC

* Graphical interface
** Remove tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** Highlights current line 
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
** Enables normal scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Removes startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** Y or N
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
** Nice symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
 
* Key bindings
** Terminal with "H-t"
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "H-t") 'ansi-term)
#+END_SRC

** Edit config.org with "H-c"
#+BEGIN_SRC emacs-lisp
(defun config-edit ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "H-c") 'config-edit)
#+END_SRC

** Reload config with "H-r"
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "H-r") 'config-reload)
#+END_SRC

** Edit init.el with "H-i"
#+BEGIN_SRC emacs-lisp
(defun init-edit ()
  (interactive)
  (find-file "~/.emacs.d/init.el"))
(global-set-key (kbd "H-i") 'init-edit)
#+END_SRC

* Completion
** IDO mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-crpeate-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** IDO vertical mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init
  (ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind 
  ("M-x" . smex))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
* Buffers
** Switch-Buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

* Latex
** PDF-Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-tools-install)
  :bind ("C-c C-g" . pdf-sync-forward-search)
  :defer t
  :config
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-view-resize-factor 1.10))
#+END_SRC
** Tex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LateX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (add-hook 'LateX-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'LateX-mode-hook 'company-mode)
    (add-hook 'LateX-mode-hook 'smartparens-mode)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
	     #'TeX-revert-document-buffer)

  ;; to use pdfview with auctex
  (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

  ;; to use pdfview with auctex
  (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
	 TeX-source-correlate-start-server t)
  (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
  (custom-set-variables '(LaTeX-command "latex -synctex=1") )
#+END_SRC
** Theme-Magic
#+BEGIN_SRC emacs-lisp
(use-package theme-magic
  :ensure t)
(require 'theme-magic)
(theme-magic-export-theme-mode)
#+END_SRC
* Programming Languages
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
(define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
(define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
(define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
(define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
(define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
#+END_SRC
